<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="286" onload="init(evt)" viewBox="0 0 1200 286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = true;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="286" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">./target/blob.json-main</text><text id="details" fill="rgb(0,0,0)" x="10" y="269.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="269.00"> </text><svg id="frames" x="10" width="1180" total_samples="569376"><g><title>acir::arithmetic (6 gates, 0.00%)</title><rect x="0.0000%" y="37" width="0.0011%" height="23" fill="rgb(255,249,249)" fg:x="0" fg:w="6"/><text x="0.2500%" y="51.50"></text></g><g><title>main.nr:204:31::hash_kzg_commitment(kzg_commitment) (83 gates, 0.01%)</title><rect x="0.0000%" y="181" width="0.0146%" height="23" fill="rgb(255,248,248)" fg:x="0" fg:w="83"/><text x="0.2500%" y="195.50"></text></g><g><title>main.nr:199:16::poseidon2::Poseidon2::hash(kzg_commitment, kzg_commitment.len()) (83 gates, 0.01%)</title><rect x="0.0000%" y="157" width="0.0146%" height="23" fill="rgb(255,248,248)" fg:x="0" fg:w="83"/><text x="0.2500%" y="171.50"></text></g><g><title>poseidon2.nr:17:13::Poseidon2::hash_internal(input, N, false) (83 gates, 0.01%)</title><rect x="0.0000%" y="133" width="0.0146%" height="23" fill="rgb(255,248,248)" fg:x="0" fg:w="83"/><text x="0.2500%" y="147.50"></text></g><g><title>poseidon2.nr:114:9::sponge.squeeze() (83 gates, 0.01%)</title><rect x="0.0000%" y="109" width="0.0146%" height="23" fill="rgb(255,248,248)" fg:x="0" fg:w="83"/><text x="0.2500%" y="123.50"></text></g><g><title>poseidon2.nr:79:39::self.perform_duplex() (83 gates, 0.01%)</title><rect x="0.0000%" y="85" width="0.0146%" height="23" fill="rgb(255,248,248)" fg:x="0" fg:w="83"/><text x="0.2500%" y="99.50"></text></g><g><title>poseidon2.nr:40:22::crate::hash::poseidon2_permutation(self.state, 4) (83 gates, 0.01%)</title><rect x="0.0000%" y="61" width="0.0146%" height="23" fill="rgb(255,248,248)" fg:x="0" fg:w="83"/><text x="0.2500%" y="75.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.01%)</title><rect x="0.0011%" y="37" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="6" fg:w="77"/><text x="0.2511%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="0.0146%" y="85" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="83" fg:w="1"/><text x="0.2646%" y="99.50"></text></g><g><title>acir::memory::init (16,256 gates, 2.86%)</title><rect x="0.0148%" y="85" width="2.8551%" height="23" fill="rgb(255,224,224)" fg:x="84" fg:w="16256"/><text x="0.2648%" y="99.50">ac..</text></g><g><title>main.nr:156:27::x.limbs[3] (32,513 gates, 5.71%)</title><rect x="0.0146%" y="109" width="5.7103%" height="23" fill="rgb(255,214,214)" fg:x="83" fg:w="32513"/><text x="0.2646%" y="123.50">main.nr..</text></g><g><title>acir::memory::op (16,256 gates, 2.86%)</title><rect x="2.8698%" y="85" width="2.8551%" height="23" fill="rgb(255,224,224)" fg:x="16340" fg:w="16256"/><text x="3.1198%" y="99.50">ac..</text></g><g><title>acir::arithmetic (4,064 gates, 0.71%)</title><rect x="5.7249%" y="85" width="0.7138%" height="23" fill="rgb(255,237,237)" fg:x="32596" fg:w="4064"/><text x="5.9749%" y="99.50"></text></g><g><title>main.nr:158:27::top_limb as u16 / 0x8000 (13,211 gates, 2.32%)</title><rect x="5.7249%" y="109" width="2.3203%" height="23" fill="rgb(255,227,227)" fg:x="32596" fg:w="13211"/><text x="5.9749%" y="123.50">m..</text></g><g><title>acir::blackbox::range (9,147 gates, 1.61%)</title><rect x="6.4386%" y="85" width="1.6065%" height="23" fill="rgb(255,231,231)" fg:x="36660" fg:w="9147"/><text x="6.6886%" y="99.50"></text></g><g><title>acir::arithmetic (20,320 gates, 3.57%)</title><rect x="8.0451%" y="85" width="3.5688%" height="23" fill="rgb(255,221,221)" fg:x="45807" fg:w="20320"/><text x="8.2951%" y="99.50">acir..</text></g><g><title>main.nr:168:65::unsafe_extract_top_bit(blob[i]) (123,647 gates, 21.72%)</title><rect x="0.0146%" y="133" width="21.7162%" height="23" fill="rgb(255,180,180)" fg:x="83" fg:w="123647"/><text x="0.2646%" y="147.50">main.nr:168:65::unsafe_extract_top..</text></g><g><title>main.nr:158:27::top_limb as u16 (77,923 gates, 13.69%)</title><rect x="8.0451%" y="109" width="13.6857%" height="23" fill="rgb(255,194,194)" fg:x="45807" fg:w="77923"/><text x="8.2951%" y="123.50">main.nr:158:27::top_l..</text></g><g><title>acir::blackbox::range (57,603 gates, 10.12%)</title><rect x="11.6139%" y="85" width="10.1169%" height="23" fill="rgb(255,202,202)" fg:x="66127" fg:w="57603"/><text x="11.8639%" y="99.50">acir::blackbox:..</text></g><g><title>acir::arithmetic (4,048 gates, 0.71%)</title><rect x="21.7308%" y="109" width="0.7110%" height="23" fill="rgb(255,237,237)" fg:x="123730" fg:w="4048"/><text x="21.9808%" y="123.50"></text></g><g><title>acir::memory::init (5 gates, 0.00%)</title><rect x="22.4418%" y="109" width="0.0009%" height="23" fill="rgb(255,249,249)" fg:x="127778" fg:w="5"/><text x="22.6918%" y="123.50"></text></g><g><title>main.nr:181:36::top_bits[k] (24,293 gates, 4.27%)</title><rect x="21.7308%" y="133" width="4.2666%" height="23" fill="rgb(255,219,219)" fg:x="123730" fg:w="24293"/><text x="21.9808%" y="147.50">main...</text></g><g><title>acir::memory::op (20,240 gates, 3.55%)</title><rect x="22.4426%" y="109" width="3.5548%" height="23" fill="rgb(255,221,221)" fg:x="127783" fg:w="20240"/><text x="22.6926%" y="123.50">acir..</text></g><g><title>main.nr:193:30::blob_to_fields__tightly_packed(blob) (151,988 gates, 26.69%)</title><rect x="0.0146%" y="157" width="26.6938%" height="23" fill="rgb(255,172,172)" fg:x="83" fg:w="151988"/><text x="0.2646%" y="171.50">main.nr:193:30::blob_to_fields__tightly_pac..</text></g><g><title>main.nr:182:13::std::as_witness(reconstituted_field) (4,048 gates, 0.71%)</title><rect x="25.9974%" y="133" width="0.7110%" height="23" fill="rgb(255,237,237)" fg:x="148023" fg:w="4048"/><text x="26.2474%" y="147.50"></text></g><g><title>acir::arithmetic (4,048 gates, 0.71%)</title><rect x="25.9974%" y="109" width="0.7110%" height="23" fill="rgb(255,237,237)" fg:x="148023" fg:w="4048"/><text x="26.2474%" y="123.50"></text></g><g><title>acir::arithmetic (8,207 gates, 1.44%)</title><rect x="26.7084%" y="37" width="1.4414%" height="23" fill="rgb(255,232,232)" fg:x="152071" fg:w="8207"/><text x="26.9584%" y="51.50"></text></g><g><title>poseidon2.nr:104:17::sponge.absorb(input[i]) (113,697 gates, 19.97%)</title><rect x="26.7084%" y="109" width="19.9687%" height="23" fill="rgb(255,183,183)" fg:x="152071" fg:w="113697"/><text x="26.9584%" y="123.50">poseidon2.nr:104:17::sponge.abs..</text></g><g><title>poseidon2.nr:52:21::self.perform_duplex() (113,697 gates, 19.97%)</title><rect x="26.7084%" y="85" width="19.9687%" height="23" fill="rgb(255,183,183)" fg:x="152071" fg:w="113697"/><text x="26.9584%" y="99.50">poseidon2.nr:52:21::self.perfor..</text></g><g><title>poseidon2.nr:40:22::crate::hash::poseidon2_permutation(self.state, 4) (113,697 gates, 19.97%)</title><rect x="26.7084%" y="61" width="19.9687%" height="23" fill="rgb(255,183,183)" fg:x="152071" fg:w="113697"/><text x="26.9584%" y="75.50">poseidon2.nr:40:22::crate::hash..</text></g><g><title>acir::blackbox::poseidon2_permutation (105,490 gates, 18.53%)</title><rect x="28.1498%" y="37" width="18.5273%" height="23" fill="rgb(255,185,185)" fg:x="160278" fg:w="105490"/><text x="28.3998%" y="51.50">acir::blackbox::poseidon2_per..</text></g><g><title>acir::arithmetic (2 gates, 0.00%)</title><rect x="46.6771%" y="37" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="265768" fg:w="2"/><text x="46.9271%" y="51.50"></text></g><g><title>main.nr:205:21::hash_blob(blob) (265,764 gates, 46.68%)</title><rect x="0.0146%" y="181" width="46.6764%" height="23" fill="rgb(255,147,147)" fg:x="83" fg:w="265764"/><text x="0.2646%" y="195.50">main.nr:205:21::hash_blob(blob)</text></g><g><title>main.nr:194:16::poseidon2::Poseidon2::hash(blob_as_fields, blob_as_fields.len()) (113,776 gates, 19.98%)</title><rect x="26.7084%" y="157" width="19.9826%" height="23" fill="rgb(255,182,182)" fg:x="152071" fg:w="113776"/><text x="26.9584%" y="171.50">main.nr:194:16::poseidon2::Pose..</text></g><g><title>poseidon2.nr:17:13::Poseidon2::hash_internal(input, N, false) (113,776 gates, 19.98%)</title><rect x="26.7084%" y="133" width="19.9826%" height="23" fill="rgb(255,182,182)" fg:x="152071" fg:w="113776"/><text x="26.9584%" y="147.50">poseidon2.nr:17:13::Poseidon2::..</text></g><g><title>poseidon2.nr:114:9::sponge.squeeze() (79 gates, 0.01%)</title><rect x="46.6771%" y="109" width="0.0139%" height="23" fill="rgb(255,248,248)" fg:x="265768" fg:w="79"/><text x="46.9271%" y="123.50"></text></g><g><title>poseidon2.nr:79:39::self.perform_duplex() (79 gates, 0.01%)</title><rect x="46.6771%" y="85" width="0.0139%" height="23" fill="rgb(255,248,248)" fg:x="265768" fg:w="79"/><text x="46.9271%" y="99.50"></text></g><g><title>poseidon2.nr:40:22::crate::hash::poseidon2_permutation(self.state, 4) (79 gates, 0.01%)</title><rect x="46.6771%" y="61" width="0.0139%" height="23" fill="rgb(255,248,248)" fg:x="265768" fg:w="79"/><text x="46.9271%" y="75.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.01%)</title><rect x="46.6774%" y="37" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265770" fg:w="77"/><text x="46.9274%" y="51.50"></text></g><g><title>main.nr:218:30::compute_challenge(blob, kzg_commitment) (265,924 gates, 46.70%)</title><rect x="0.0000%" y="205" width="46.7045%" height="23" fill="rgb(255,147,147)" fg:x="0" fg:w="265924"/><text x="0.2500%" y="219.50">main.nr:218:30::compute_challenge(blob, kzg_commitment)</text></g><g><title>main.nr:207:21::poseidon2::Poseidon2::hash([blob_hash, kzg_commitment_hash], 2) (77 gates, 0.01%)</title><rect x="46.6909%" y="181" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265847" fg:w="77"/><text x="46.9409%" y="195.50"></text></g><g><title>poseidon2.nr:17:13::Poseidon2::hash_internal(input, N, false) (77 gates, 0.01%)</title><rect x="46.6909%" y="157" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265847" fg:w="77"/><text x="46.9409%" y="171.50"></text></g><g><title>poseidon2.nr:114:9::sponge.squeeze() (77 gates, 0.01%)</title><rect x="46.6909%" y="133" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265847" fg:w="77"/><text x="46.9409%" y="147.50"></text></g><g><title>poseidon2.nr:79:39::self.perform_duplex() (77 gates, 0.01%)</title><rect x="46.6909%" y="109" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265847" fg:w="77"/><text x="46.9409%" y="123.50"></text></g><g><title>poseidon2.nr:40:22::crate::hash::poseidon2_permutation(self.state, 4) (77 gates, 0.01%)</title><rect x="46.6909%" y="85" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265847" fg:w="77"/><text x="46.9409%" y="99.50"></text></g><g><title>acir::blackbox::poseidon2_permutation (77 gates, 0.01%)</title><rect x="46.6909%" y="61" width="0.0135%" height="23" fill="rgb(255,248,248)" fg:x="265847" fg:w="77"/><text x="46.9409%" y="75.50"></text></g><g><title>main.nr:219:36::field_to_bignum(challenge_z) (1 gates, 0.00%)</title><rect x="46.7045%" y="205" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="265924" fg:w="1"/><text x="46.9545%" y="219.50"></text></g><g><title>main.nr:94:12::check == x (1 gates, 0.00%)</title><rect x="46.7045%" y="181" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="265924" fg:w="1"/><text x="46.9545%" y="195.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="46.7045%" y="157" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="265924" fg:w="1"/><text x="46.9545%" y="171.50"></text></g><g><title>runtime_bignum.nr:253:13::self.limbs[i].assert_max_bit_size(120) (56 gates, 0.01%)</title><rect x="46.7046%" y="109" width="0.0098%" height="23" fill="rgb(255,248,248)" fg:x="265925" fg:w="56"/><text x="46.9546%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (56 gates, 0.01%)</title><rect x="46.7046%" y="85" width="0.0098%" height="23" fill="rgb(255,248,248)" fg:x="265925" fg:w="56"/><text x="46.9546%" y="99.50"></text></g><g><title>acir::blackbox::range (56 gates, 0.01%)</title><rect x="46.7046%" y="61" width="0.0098%" height="23" fill="rgb(255,248,248)" fg:x="265925" fg:w="56"/><text x="46.9546%" y="75.50"></text></g><g><title>runtime_bignum.nr:422:9::quotient.validate_quotient_in_range() (81 gates, 0.01%)</title><rect x="46.7046%" y="133" width="0.0142%" height="23" fill="rgb(255,248,248)" fg:x="265925" fg:w="81"/><text x="46.9546%" y="147.50"></text></g><g><title>runtime_bignum.nr:257:9::self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32) (25 gates, 0.00%)</title><rect x="46.7145%" y="109" width="0.0044%" height="23" fill="rgb(255,249,249)" fg:x="265981" fg:w="25"/><text x="46.9645%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (25 gates, 0.00%)</title><rect x="46.7145%" y="85" width="0.0044%" height="23" fill="rgb(255,249,249)" fg:x="265981" fg:w="25"/><text x="46.9645%" y="99.50"></text></g><g><title>acir::blackbox::range (25 gates, 0.00%)</title><rect x="46.7145%" y="61" width="0.0044%" height="23" fill="rgb(255,249,249)" fg:x="265981" fg:w="25"/><text x="46.9645%" y="75.50"></text></g><g><title>runtime_bignum.nr:479:25::std::as_witness(new_term) (9 gates, 0.00%)</title><rect x="46.7189%" y="133" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266006" fg:w="9"/><text x="46.9689%" y="147.50"></text></g><g><title>acir::arithmetic (9 gates, 0.00%)</title><rect x="46.7189%" y="109" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266006" fg:w="9"/><text x="46.9689%" y="123.50"></text></g><g><title>runtime_bignum.nr:506:9::borrow_flags.get(0).assert_max_bit_size(1) (1 gates, 0.00%)</title><rect x="46.7204%" y="133" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266015" fg:w="1"/><text x="46.9704%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (1 gates, 0.00%)</title><rect x="46.7204%" y="109" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266015" fg:w="1"/><text x="46.9704%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="46.7204%" y="85" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266015" fg:w="1"/><text x="46.9704%" y="99.50"></text></g><g><title>runtime_bignum.nr:509:13::borrow_flags.get(i).assert_max_bit_size(1) (3 gates, 0.00%)</title><rect x="46.7206%" y="133" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="266016" fg:w="3"/><text x="46.9706%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (3 gates, 0.00%)</title><rect x="46.7206%" y="109" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="266016" fg:w="3"/><text x="46.9706%" y="123.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.00%)</title><rect x="46.7206%" y="85" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="266016" fg:w="3"/><text x="46.9706%" y="99.50"></text></g><g><title>runtime_bignum.nr:532:13::std::as_witness(product_limbs.get(i)) (9 gates, 0.00%)</title><rect x="46.7211%" y="133" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266019" fg:w="9"/><text x="46.9711%" y="147.50"></text></g><g><title>acir::arithmetic (9 gates, 0.00%)</title><rect x="46.7211%" y="109" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266019" fg:w="9"/><text x="46.9711%" y="123.50"></text></g><g><title>runtime_bignum.nr:533:13::product_limbs.get(i).assert_max_bit_size(126) (21 gates, 0.00%)</title><rect x="46.7227%" y="133" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="266028" fg:w="21"/><text x="46.9727%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (21 gates, 0.00%)</title><rect x="46.7227%" y="109" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="266028" fg:w="21"/><text x="46.9727%" y="123.50"></text></g><g><title>acir::blackbox::range (21 gates, 0.00%)</title><rect x="46.7227%" y="85" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="266028" fg:w="21"/><text x="46.9727%" y="99.50"></text></g><g><title>main.nr:259:9::um::evaluate_quadratic_expression([[z]], [[false]], [[z]], [[false]], [t1], [true]);

  (125 gates, 0.02%)</title><rect x="46.7046%" y="181" width="0.0220%" height="23" fill="rgb(255,247,247)" fg:x="265925" fg:w="125"/><text x="46.9546%" y="195.50"></text></g><g><title>lib.nr:230:9::Params::get_instance().evaluate_quadratic_expression(
            lhs_terms,
            lhs_flags,
            rhs_terms,
            rhs_flags,
            linear_terms,
            linear_flags
        ) (125 gates, 0.02%)</title><rect x="46.7046%" y="157" width="0.0220%" height="23" fill="rgb(255,247,247)" fg:x="265925" fg:w="125"/><text x="46.9546%" y="171.50"></text></g><g><title>runtime_bignum.nr:537:16::product_limbs.get(N + N - 2) == 0 (1 gates, 0.00%)</title><rect x="46.7264%" y="133" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266049" fg:w="1"/><text x="46.9764%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="46.7264%" y="109" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266049" fg:w="1"/><text x="46.9764%" y="123.50"></text></g><g><title>runtime_bignum.nr:253:13::self.limbs[i].assert_max_bit_size(120) (115 gates, 0.02%)</title><rect x="46.7266%" y="109" width="0.0202%" height="23" fill="rgb(255,247,247)" fg:x="266050" fg:w="115"/><text x="46.9766%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (115 gates, 0.02%)</title><rect x="46.7266%" y="85" width="0.0202%" height="23" fill="rgb(255,247,247)" fg:x="266050" fg:w="115"/><text x="46.9766%" y="99.50"></text></g><g><title>acir::blackbox::range (115 gates, 0.02%)</title><rect x="46.7266%" y="61" width="0.0202%" height="23" fill="rgb(255,247,247)" fg:x="266050" fg:w="115"/><text x="46.9766%" y="75.50"></text></g><g><title>runtime_bignum.nr:422:9::quotient.validate_quotient_in_range() (131 gates, 0.02%)</title><rect x="46.7266%" y="133" width="0.0230%" height="23" fill="rgb(255,247,247)" fg:x="266050" fg:w="131"/><text x="46.9766%" y="147.50"></text></g><g><title>runtime_bignum.nr:257:9::self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32) (16 gates, 0.00%)</title><rect x="46.7468%" y="109" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="266165" fg:w="16"/><text x="46.9968%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (16 gates, 0.00%)</title><rect x="46.7468%" y="85" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="266165" fg:w="16"/><text x="46.9968%" y="99.50"></text></g><g><title>acir::blackbox::range (16 gates, 0.00%)</title><rect x="46.7468%" y="61" width="0.0028%" height="23" fill="rgb(255,249,249)" fg:x="266165" fg:w="16"/><text x="46.9968%" y="75.50"></text></g><g><title>runtime_bignum.nr:479:25::std::as_witness(new_term) (99 gates, 0.02%)</title><rect x="46.7496%" y="133" width="0.0174%" height="23" fill="rgb(255,248,248)" fg:x="266181" fg:w="99"/><text x="46.9996%" y="147.50"></text></g><g><title>acir::arithmetic (99 gates, 0.02%)</title><rect x="46.7496%" y="109" width="0.0174%" height="23" fill="rgb(255,248,248)" fg:x="266181" fg:w="99"/><text x="46.9996%" y="123.50"></text></g><g><title>runtime_bignum.nr:506:9::borrow_flags.get(0).assert_max_bit_size(1) (11 gates, 0.00%)</title><rect x="46.7670%" y="133" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266280" fg:w="11"/><text x="47.0170%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (11 gates, 0.00%)</title><rect x="46.7670%" y="109" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266280" fg:w="11"/><text x="47.0170%" y="123.50"></text></g><g><title>acir::blackbox::range (11 gates, 0.00%)</title><rect x="46.7670%" y="85" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266280" fg:w="11"/><text x="47.0170%" y="99.50"></text></g><g><title>runtime_bignum.nr:509:13::borrow_flags.get(i).assert_max_bit_size(1) (33 gates, 0.01%)</title><rect x="46.7689%" y="133" width="0.0058%" height="23" fill="rgb(255,248,248)" fg:x="266291" fg:w="33"/><text x="47.0189%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (33 gates, 0.01%)</title><rect x="46.7689%" y="109" width="0.0058%" height="23" fill="rgb(255,248,248)" fg:x="266291" fg:w="33"/><text x="47.0189%" y="123.50"></text></g><g><title>acir::blackbox::range (33 gates, 0.01%)</title><rect x="46.7689%" y="85" width="0.0058%" height="23" fill="rgb(255,248,248)" fg:x="266291" fg:w="33"/><text x="47.0189%" y="99.50"></text></g><g><title>runtime_bignum.nr:532:13::std::as_witness(product_limbs.get(i)) (99 gates, 0.02%)</title><rect x="46.7747%" y="133" width="0.0174%" height="23" fill="rgb(255,248,248)" fg:x="266324" fg:w="99"/><text x="47.0247%" y="147.50"></text></g><g><title>acir::arithmetic (99 gates, 0.02%)</title><rect x="46.7747%" y="109" width="0.0174%" height="23" fill="rgb(255,248,248)" fg:x="266324" fg:w="99"/><text x="47.0247%" y="123.50"></text></g><g><title>runtime_bignum.nr:533:13::product_limbs.get(i).assert_max_bit_size(126) (231 gates, 0.04%)</title><rect x="46.7921%" y="133" width="0.0406%" height="23" fill="rgb(255,247,247)" fg:x="266423" fg:w="231"/><text x="47.0421%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (231 gates, 0.04%)</title><rect x="46.7921%" y="109" width="0.0406%" height="23" fill="rgb(255,247,247)" fg:x="266423" fg:w="231"/><text x="47.0421%" y="123.50"></text></g><g><title>acir::blackbox::range (231 gates, 0.04%)</title><rect x="46.7921%" y="85" width="0.0406%" height="23" fill="rgb(255,247,247)" fg:x="266423" fg:w="231"/><text x="47.0421%" y="99.50"></text></g><g><title>main.nr:270:13::um::evaluate_quadratic_expression([[t1]], [[false]], [[t1]], [[false]], [t2], [true]);

  (615 gates, 0.11%)</title><rect x="46.7266%" y="181" width="0.1080%" height="23" fill="rgb(255,245,245)" fg:x="266050" fg:w="615"/><text x="46.9766%" y="195.50"></text></g><g><title>lib.nr:230:9::Params::get_instance().evaluate_quadratic_expression(
            lhs_terms,
            lhs_flags,
            rhs_terms,
            rhs_flags,
            linear_terms,
            linear_flags
        ) (615 gates, 0.11%)</title><rect x="46.7266%" y="157" width="0.1080%" height="23" fill="rgb(255,245,245)" fg:x="266050" fg:w="615"/><text x="46.9766%" y="171.50"></text></g><g><title>runtime_bignum.nr:537:16::product_limbs.get(N + N - 2) == 0 (11 gates, 0.00%)</title><rect x="46.8327%" y="133" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266654" fg:w="11"/><text x="47.0827%" y="147.50"></text></g><g><title>acir::arithmetic (11 gates, 0.00%)</title><rect x="46.8327%" y="109" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266654" fg:w="11"/><text x="47.0827%" y="123.50"></text></g><g><title>runtime_bignum.nr:253:13::self.limbs[i].assert_max_bit_size(120) (11 gates, 0.00%)</title><rect x="46.8346%" y="109" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266665" fg:w="11"/><text x="47.0846%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (11 gates, 0.00%)</title><rect x="46.8346%" y="85" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266665" fg:w="11"/><text x="47.0846%" y="99.50"></text></g><g><title>acir::blackbox::range (11 gates, 0.00%)</title><rect x="46.8346%" y="61" width="0.0019%" height="23" fill="rgb(255,249,249)" fg:x="266665" fg:w="11"/><text x="47.0846%" y="75.50"></text></g><g><title>runtime_bignum.nr:422:9::quotient.validate_quotient_in_range() (13 gates, 0.00%)</title><rect x="46.8346%" y="133" width="0.0023%" height="23" fill="rgb(255,249,249)" fg:x="266665" fg:w="13"/><text x="47.0846%" y="147.50"></text></g><g><title>runtime_bignum.nr:257:9::self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32) (2 gates, 0.00%)</title><rect x="46.8365%" y="109" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="266676" fg:w="2"/><text x="47.0865%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (2 gates, 0.00%)</title><rect x="46.8365%" y="85" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="266676" fg:w="2"/><text x="47.0865%" y="99.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.00%)</title><rect x="46.8365%" y="61" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="266676" fg:w="2"/><text x="47.0865%" y="75.50"></text></g><g><title>runtime_bignum.nr:479:25::std::as_witness(new_term) (9 gates, 0.00%)</title><rect x="46.8369%" y="133" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266678" fg:w="9"/><text x="47.0869%" y="147.50"></text></g><g><title>acir::arithmetic (9 gates, 0.00%)</title><rect x="46.8369%" y="109" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266678" fg:w="9"/><text x="47.0869%" y="123.50"></text></g><g><title>runtime_bignum.nr:506:9::borrow_flags.get(0).assert_max_bit_size(1) (1 gates, 0.00%)</title><rect x="46.8385%" y="133" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266687" fg:w="1"/><text x="47.0885%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (1 gates, 0.00%)</title><rect x="46.8385%" y="109" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266687" fg:w="1"/><text x="47.0885%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="46.8385%" y="85" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266687" fg:w="1"/><text x="47.0885%" y="99.50"></text></g><g><title>runtime_bignum.nr:509:13::borrow_flags.get(i).assert_max_bit_size(1) (3 gates, 0.00%)</title><rect x="46.8386%" y="133" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="266688" fg:w="3"/><text x="47.0886%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (3 gates, 0.00%)</title><rect x="46.8386%" y="109" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="266688" fg:w="3"/><text x="47.0886%" y="123.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.00%)</title><rect x="46.8386%" y="85" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="266688" fg:w="3"/><text x="47.0886%" y="99.50"></text></g><g><title>runtime_bignum.nr:532:13::std::as_witness(product_limbs.get(i)) (9 gates, 0.00%)</title><rect x="46.8392%" y="133" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266691" fg:w="9"/><text x="47.0892%" y="147.50"></text></g><g><title>acir::arithmetic (9 gates, 0.00%)</title><rect x="46.8392%" y="109" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="266691" fg:w="9"/><text x="47.0892%" y="123.50"></text></g><g><title>runtime_bignum.nr:533:13::product_limbs.get(i).assert_max_bit_size(126) (21 gates, 0.00%)</title><rect x="46.8408%" y="133" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="266700" fg:w="21"/><text x="47.0908%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (21 gates, 0.00%)</title><rect x="46.8408%" y="109" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="266700" fg:w="21"/><text x="47.0908%" y="123.50"></text></g><g><title>acir::blackbox::range (21 gates, 0.00%)</title><rect x="46.8408%" y="85" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="266700" fg:w="21"/><text x="47.0908%" y="99.50"></text></g><g><title>main.nr:293:9::um::evaluate_quadratic_expression(
        [[z_pow_d]],
        [[false]],
        [[D_INV]],
        [[false]],
        [factor, D_INV],
        [true, true]
    );

  (57 gates, 0.01%)</title><rect x="46.8346%" y="181" width="0.0100%" height="23" fill="rgb(255,248,248)" fg:x="266665" fg:w="57"/><text x="47.0846%" y="195.50"></text></g><g><title>lib.nr:230:9::Params::get_instance().evaluate_quadratic_expression(
            lhs_terms,
            lhs_flags,
            rhs_terms,
            rhs_flags,
            linear_terms,
            linear_flags
        ) (57 gates, 0.01%)</title><rect x="46.8346%" y="157" width="0.0100%" height="23" fill="rgb(255,248,248)" fg:x="266665" fg:w="57"/><text x="47.0846%" y="171.50"></text></g><g><title>runtime_bignum.nr:537:16::product_limbs.get(N + N - 2) == 0 (1 gates, 0.00%)</title><rect x="46.8444%" y="133" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266721" fg:w="1"/><text x="47.0944%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="46.8444%" y="109" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="266721" fg:w="1"/><text x="47.0944%" y="123.50"></text></g><g><title>runtime_bignum.nr:253:13::self.limbs[i].assert_max_bit_size(120) (43,008 gates, 7.55%)</title><rect x="46.8446%" y="109" width="7.5535%" height="23" fill="rgb(255,208,208)" fg:x="266722" fg:w="43008"/><text x="47.0946%" y="123.50">runtime_bi..</text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (43,008 gates, 7.55%)</title><rect x="46.8446%" y="85" width="7.5535%" height="23" fill="rgb(255,208,208)" fg:x="266722" fg:w="43008"/><text x="47.0946%" y="99.50">mod.nr:27:..</text></g><g><title>acir::blackbox::range (43,008 gates, 7.55%)</title><rect x="46.8446%" y="61" width="7.5535%" height="23" fill="rgb(255,208,208)" fg:x="266722" fg:w="43008"/><text x="47.0946%" y="75.50">acir::blac..</text></g><g><title>runtime_bignum.nr:422:9::quotient.validate_quotient_in_range() (49,152 gates, 8.63%)</title><rect x="46.8446%" y="133" width="8.6326%" height="23" fill="rgb(255,205,205)" fg:x="266722" fg:w="49152"/><text x="47.0946%" y="147.50">runtime_bign..</text></g><g><title>runtime_bignum.nr:257:9::self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32) (6,144 gates, 1.08%)</title><rect x="54.3981%" y="109" width="1.0791%" height="23" fill="rgb(255,234,234)" fg:x="309730" fg:w="6144"/><text x="54.6481%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (6,144 gates, 1.08%)</title><rect x="54.3981%" y="85" width="1.0791%" height="23" fill="rgb(255,234,234)" fg:x="309730" fg:w="6144"/><text x="54.6481%" y="99.50"></text></g><g><title>acir::blackbox::range (6,144 gates, 1.08%)</title><rect x="54.3981%" y="61" width="1.0791%" height="23" fill="rgb(255,234,234)" fg:x="309730" fg:w="6144"/><text x="54.6481%" y="75.50"></text></g><g><title>runtime_bignum.nr:479:25::std::as_witness(new_term) (36,864 gates, 6.47%)</title><rect x="55.4772%" y="133" width="6.4745%" height="23" fill="rgb(255,211,211)" fg:x="315874" fg:w="36864"/><text x="55.7272%" y="147.50">runtime_..</text></g><g><title>acir::arithmetic (36,864 gates, 6.47%)</title><rect x="55.4772%" y="109" width="6.4745%" height="23" fill="rgb(255,211,211)" fg:x="315874" fg:w="36864"/><text x="55.7272%" y="123.50">acir::ar..</text></g><g><title>runtime_bignum.nr:506:9::borrow_flags.get(0).assert_max_bit_size(1) (4,096 gates, 0.72%)</title><rect x="61.9517%" y="133" width="0.7194%" height="23" fill="rgb(255,237,237)" fg:x="352738" fg:w="4096"/><text x="62.2017%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (4,096 gates, 0.72%)</title><rect x="61.9517%" y="109" width="0.7194%" height="23" fill="rgb(255,237,237)" fg:x="352738" fg:w="4096"/><text x="62.2017%" y="123.50"></text></g><g><title>acir::blackbox::range (4,096 gates, 0.72%)</title><rect x="61.9517%" y="85" width="0.7194%" height="23" fill="rgb(255,237,237)" fg:x="352738" fg:w="4096"/><text x="62.2017%" y="99.50"></text></g><g><title>runtime_bignum.nr:509:13::borrow_flags.get(i).assert_max_bit_size(1) (12,288 gates, 2.16%)</title><rect x="62.6711%" y="133" width="2.1582%" height="23" fill="rgb(255,228,228)" fg:x="356834" fg:w="12288"/><text x="62.9211%" y="147.50">r..</text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (12,288 gates, 2.16%)</title><rect x="62.6711%" y="109" width="2.1582%" height="23" fill="rgb(255,228,228)" fg:x="356834" fg:w="12288"/><text x="62.9211%" y="123.50">m..</text></g><g><title>acir::blackbox::range (12,288 gates, 2.16%)</title><rect x="62.6711%" y="85" width="2.1582%" height="23" fill="rgb(255,228,228)" fg:x="356834" fg:w="12288"/><text x="62.9211%" y="99.50">a..</text></g><g><title>runtime_bignum.nr:532:13::std::as_witness(product_limbs.get(i)) (32,768 gates, 5.76%)</title><rect x="64.8292%" y="133" width="5.7551%" height="23" fill="rgb(255,214,214)" fg:x="369122" fg:w="32768"/><text x="65.0792%" y="147.50">runtime..</text></g><g><title>acir::arithmetic (32,768 gates, 5.76%)</title><rect x="64.8292%" y="109" width="5.7551%" height="23" fill="rgb(255,214,214)" fg:x="369122" fg:w="32768"/><text x="65.0792%" y="123.50">acir::a..</text></g><g><title>runtime_bignum.nr:533:13::product_limbs.get(i).assert_max_bit_size(126) (86,016 gates, 15.11%)</title><rect x="70.5843%" y="133" width="15.1071%" height="23" fill="rgb(255,191,191)" fg:x="401890" fg:w="86016"/><text x="70.8343%" y="147.50">runtime_bignum.nr:533:1..</text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (86,016 gates, 15.11%)</title><rect x="70.5843%" y="109" width="15.1071%" height="23" fill="rgb(255,191,191)" fg:x="401890" fg:w="86016"/><text x="70.8343%" y="123.50">mod.nr:27:9::self.__ass..</text></g><g><title>acir::blackbox::range (86,016 gates, 15.11%)</title><rect x="70.5843%" y="85" width="15.1071%" height="23" fill="rgb(255,191,191)" fg:x="401890" fg:w="86016"/><text x="70.8343%" y="99.50">acir::blackbox::range</text></g><g><title>main.nr:359:19::aluate_quadratic_expression(
            [[frac]],
            [[false]],
            [[z, NEGATIVE_ROOTS[i]]],
            [[false, false]],
            [ROOTS[i]],
            [true]
        );
         (225,280 gates, 39.57%)</title><rect x="46.8446%" y="181" width="39.5661%" height="23" fill="rgb(255,155,155)" fg:x="266722" fg:w="225280"/><text x="47.0946%" y="195.50">main.nr:359:19::aluate_quadratic_expression(
            [[frac]]..</text></g><g><title>lib.nr:230:9::Params::get_instance().evaluate_quadratic_expression(
            lhs_terms,
            lhs_flags,
            rhs_terms,
            rhs_flags,
            linear_terms,
            linear_flags
        ) (225,280 gates, 39.57%)</title><rect x="46.8446%" y="157" width="39.5661%" height="23" fill="rgb(255,155,155)" fg:x="266722" fg:w="225280"/><text x="47.0946%" y="171.50">lib.nr:230:9::Params::get_instance().evaluate_quadratic_expressio..</text></g><g><title>runtime_bignum.nr:537:16::product_limbs.get(N + N - 2) == 0 (4,096 gates, 0.72%)</title><rect x="85.6914%" y="133" width="0.7194%" height="23" fill="rgb(255,237,237)" fg:x="487906" fg:w="4096"/><text x="85.9414%" y="147.50"></text></g><g><title>acir::arithmetic (4,096 gates, 0.72%)</title><rect x="85.6914%" y="109" width="0.7194%" height="23" fill="rgb(255,237,237)" fg:x="487906" fg:w="4096"/><text x="85.9414%" y="123.50"></text></g><g><title>runtime_bignum.nr:253:13::self.limbs[i].assert_max_bit_size(120) (5,376 gates, 0.94%)</title><rect x="86.4107%" y="109" width="0.9442%" height="23" fill="rgb(255,235,235)" fg:x="492002" fg:w="5376"/><text x="86.6607%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (5,376 gates, 0.94%)</title><rect x="86.4107%" y="85" width="0.9442%" height="23" fill="rgb(255,235,235)" fg:x="492002" fg:w="5376"/><text x="86.6607%" y="99.50"></text></g><g><title>acir::blackbox::range (5,376 gates, 0.94%)</title><rect x="86.4107%" y="61" width="0.9442%" height="23" fill="rgb(255,235,235)" fg:x="492002" fg:w="5376"/><text x="86.6607%" y="75.50"></text></g><g><title>runtime_bignum.nr:422:9::quotient.validate_quotient_in_range() (6,144 gates, 1.08%)</title><rect x="86.4107%" y="133" width="1.0791%" height="23" fill="rgb(255,234,234)" fg:x="492002" fg:w="6144"/><text x="86.6607%" y="147.50"></text></g><g><title>runtime_bignum.nr:257:9::self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32) (768 gates, 0.13%)</title><rect x="87.3549%" y="109" width="0.1349%" height="23" fill="rgb(255,244,244)" fg:x="497378" fg:w="768"/><text x="87.6049%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (768 gates, 0.13%)</title><rect x="87.3549%" y="85" width="0.1349%" height="23" fill="rgb(255,244,244)" fg:x="497378" fg:w="768"/><text x="87.6049%" y="99.50"></text></g><g><title>acir::blackbox::range (768 gates, 0.13%)</title><rect x="87.3549%" y="61" width="0.1349%" height="23" fill="rgb(255,244,244)" fg:x="497378" fg:w="768"/><text x="87.6049%" y="75.50"></text></g><g><title>runtime_bignum.nr:479:25::std::as_witness(new_term) (4,608 gates, 0.81%)</title><rect x="87.4898%" y="133" width="0.8093%" height="23" fill="rgb(255,236,236)" fg:x="498146" fg:w="4608"/><text x="87.7398%" y="147.50"></text></g><g><title>acir::arithmetic (4,608 gates, 0.81%)</title><rect x="87.4898%" y="109" width="0.8093%" height="23" fill="rgb(255,236,236)" fg:x="498146" fg:w="4608"/><text x="87.7398%" y="123.50"></text></g><g><title>runtime_bignum.nr:506:9::borrow_flags.get(0).assert_max_bit_size(1) (512 gates, 0.09%)</title><rect x="88.2991%" y="133" width="0.0899%" height="23" fill="rgb(255,245,245)" fg:x="502754" fg:w="512"/><text x="88.5491%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (512 gates, 0.09%)</title><rect x="88.2991%" y="109" width="0.0899%" height="23" fill="rgb(255,245,245)" fg:x="502754" fg:w="512"/><text x="88.5491%" y="123.50"></text></g><g><title>acir::blackbox::range (512 gates, 0.09%)</title><rect x="88.2991%" y="85" width="0.0899%" height="23" fill="rgb(255,245,245)" fg:x="502754" fg:w="512"/><text x="88.5491%" y="99.50"></text></g><g><title>runtime_bignum.nr:509:13::borrow_flags.get(i).assert_max_bit_size(1) (1,536 gates, 0.27%)</title><rect x="88.3890%" y="133" width="0.2698%" height="23" fill="rgb(255,242,242)" fg:x="503266" fg:w="1536"/><text x="88.6390%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (1,536 gates, 0.27%)</title><rect x="88.3890%" y="109" width="0.2698%" height="23" fill="rgb(255,242,242)" fg:x="503266" fg:w="1536"/><text x="88.6390%" y="123.50"></text></g><g><title>acir::blackbox::range (1,536 gates, 0.27%)</title><rect x="88.3890%" y="85" width="0.2698%" height="23" fill="rgb(255,242,242)" fg:x="503266" fg:w="1536"/><text x="88.6390%" y="99.50"></text></g><g><title>runtime_bignum.nr:532:13::std::as_witness(product_limbs.get(i)) (48,128 gates, 8.45%)</title><rect x="88.6588%" y="133" width="8.4528%" height="23" fill="rgb(255,206,206)" fg:x="504802" fg:w="48128"/><text x="88.9088%" y="147.50">runtime_bign..</text></g><g><title>acir::arithmetic (48,128 gates, 8.45%)</title><rect x="88.6588%" y="109" width="8.4528%" height="23" fill="rgb(255,206,206)" fg:x="504802" fg:w="48128"/><text x="88.9088%" y="123.50">acir::arithm..</text></g><g><title>runtime_bignum.nr:533:13::product_limbs.get(i).assert_max_bit_size(126) (10,752 gates, 1.89%)</title><rect x="97.1116%" y="133" width="1.8884%" height="23" fill="rgb(255,229,229)" fg:x="552930" fg:w="10752"/><text x="97.3616%" y="147.50">r..</text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (10,752 gates, 1.89%)</title><rect x="97.1116%" y="109" width="1.8884%" height="23" fill="rgb(255,229,229)" fg:x="552930" fg:w="10752"/><text x="97.3616%" y="123.50">m..</text></g><g><title>acir::blackbox::range (10,752 gates, 1.89%)</title><rect x="97.1116%" y="85" width="1.8884%" height="23" fill="rgb(255,229,229)" fg:x="552930" fg:w="10752"/><text x="97.3616%" y="99.50">a..</text></g><g><title>main.nr:466:35::_expression(
            [[lhs[0]], [lhs[1]], [lhs[2]], [lhs[3]], [lhs[4]], [lhs[5]], [lhs[6]], [lhs[7]]],
            [[false], [false], [false], [false], [false], [false], [false], [false]],
            [[rhs[0]], [rhs[1]], [rhs[2]], [rhs[3]], [rhs[4]], [rhs[5]], [rhs[6]], [rhs[7]]],
            [[false], [false], [false], [false], [false], [false], [false], [false]],
            [sum, sum_out],
            [false, true]
        );

        sum = sum_out;
 (77,312 gates, 13.58%)</title><rect x="86.4107%" y="181" width="13.5784%" height="23" fill="rgb(255,194,194)" fg:x="492002" fg:w="77312"/><text x="86.6607%" y="195.50">main.nr:466:35::_expr..</text></g><g><title>lib.nr:230:9::Params::get_instance().evaluate_quadratic_expression(
            lhs_terms,
            lhs_flags,
            rhs_terms,
            rhs_flags,
            linear_terms,
            linear_flags
        ) (77,312 gates, 13.58%)</title><rect x="86.4107%" y="157" width="13.5784%" height="23" fill="rgb(255,194,194)" fg:x="492002" fg:w="77312"/><text x="86.6607%" y="171.50">lib.nr:230:9::Params:..</text></g><g><title>runtime_bignum.nr:537:16::product_limbs.get(N + N - 2) == 0 (5,632 gates, 0.99%)</title><rect x="99.0000%" y="133" width="0.9892%" height="23" fill="rgb(255,235,235)" fg:x="563682" fg:w="5632"/><text x="99.2500%" y="147.50"></text></g><g><title>acir::arithmetic (5,632 gates, 0.99%)</title><rect x="99.0000%" y="109" width="0.9892%" height="23" fill="rgb(255,235,235)" fg:x="563682" fg:w="5632"/><text x="99.2500%" y="123.50"></text></g><g><title>runtime_bignum.nr:253:13::self.limbs[i].assert_max_bit_size(120) (10 gates, 0.00%)</title><rect x="99.9891%" y="109" width="0.0018%" height="23" fill="rgb(255,249,249)" fg:x="569314" fg:w="10"/><text x="100.2391%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (10 gates, 0.00%)</title><rect x="99.9891%" y="85" width="0.0018%" height="23" fill="rgb(255,249,249)" fg:x="569314" fg:w="10"/><text x="100.2391%" y="99.50"></text></g><g><title>acir::blackbox::range (10 gates, 0.00%)</title><rect x="99.9891%" y="61" width="0.0018%" height="23" fill="rgb(255,249,249)" fg:x="569314" fg:w="10"/><text x="100.2391%" y="75.50"></text></g><g><title>runtime_bignum.nr:422:9::quotient.validate_quotient_in_range() (12 gates, 0.00%)</title><rect x="99.9891%" y="133" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="569314" fg:w="12"/><text x="100.2391%" y="147.50"></text></g><g><title>runtime_bignum.nr:257:9::self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32) (2 gates, 0.00%)</title><rect x="99.9909%" y="109" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="569324" fg:w="2"/><text x="100.2409%" y="123.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (2 gates, 0.00%)</title><rect x="99.9909%" y="85" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="569324" fg:w="2"/><text x="100.2409%" y="99.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.00%)</title><rect x="99.9909%" y="61" width="0.0004%" height="23" fill="rgb(255,249,249)" fg:x="569324" fg:w="2"/><text x="100.2409%" y="75.50"></text></g><g><title>runtime_bignum.nr:479:25::std::as_witness(new_term) (9 gates, 0.00%)</title><rect x="99.9912%" y="133" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="569326" fg:w="9"/><text x="100.2412%" y="147.50"></text></g><g><title>acir::arithmetic (9 gates, 0.00%)</title><rect x="99.9912%" y="109" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="569326" fg:w="9"/><text x="100.2412%" y="123.50"></text></g><g><title>runtime_bignum.nr:506:9::borrow_flags.get(0).assert_max_bit_size(1) (1 gates, 0.00%)</title><rect x="99.9928%" y="133" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="569335" fg:w="1"/><text x="100.2428%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (1 gates, 0.00%)</title><rect x="99.9928%" y="109" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="569335" fg:w="1"/><text x="100.2428%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="99.9928%" y="85" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="569335" fg:w="1"/><text x="100.2428%" y="99.50"></text></g><g><title>runtime_bignum.nr:509:13::borrow_flags.get(i).assert_max_bit_size(1) (3 gates, 0.00%)</title><rect x="99.9930%" y="133" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="569336" fg:w="3"/><text x="100.2430%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (3 gates, 0.00%)</title><rect x="99.9930%" y="109" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="569336" fg:w="3"/><text x="100.2430%" y="123.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.00%)</title><rect x="99.9930%" y="85" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="569336" fg:w="3"/><text x="100.2430%" y="99.50"></text></g><g><title>runtime_bignum.nr:532:13::std::as_witness(product_limbs.get(i)) (9 gates, 0.00%)</title><rect x="99.9935%" y="133" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="569339" fg:w="9"/><text x="100.2435%" y="147.50"></text></g><g><title>acir::arithmetic (9 gates, 0.00%)</title><rect x="99.9935%" y="109" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="569339" fg:w="9"/><text x="100.2435%" y="123.50"></text></g><g><title>runtime_bignum.nr:533:13::product_limbs.get(i).assert_max_bit_size(126) (21 gates, 0.00%)</title><rect x="99.9951%" y="133" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="569348" fg:w="21"/><text x="100.2451%" y="147.50"></text></g><g><title>mod.nr:27:9::self.__assert_max_bit_size(bit_size) (21 gates, 0.00%)</title><rect x="99.9951%" y="109" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="569348" fg:w="21"/><text x="100.2451%" y="123.50"></text></g><g><title>acir::blackbox::range (21 gates, 0.00%)</title><rect x="99.9951%" y="85" width="0.0037%" height="23" fill="rgb(255,249,249)" fg:x="569348" fg:w="21"/><text x="100.2451%" y="99.50"></text></g><g><title>main.nr:221:16::barycentric_evaluate_blob_at_z(challenge_z_as_bignum, blob) (303,445 gates, 53.29%)</title><rect x="46.7046%" y="205" width="53.2943%" height="23" fill="rgb(255,140,140)" fg:x="265925" fg:w="303445"/><text x="46.9546%" y="219.50">main.nr:221:16::barycentric_evaluate_blob_at_z(challenge_z_as_bignum, blob)</text></g><g><title>main.nr:488:31::_expression([[factor]], [[false]], [[sum]], [[false]], [y], [true]);

    println(y);

    y
 (56 gates, 0.01%)</title><rect x="99.9891%" y="181" width="0.0098%" height="23" fill="rgb(255,248,248)" fg:x="569314" fg:w="56"/><text x="100.2391%" y="195.50"></text></g><g><title>lib.nr:230:9::Params::get_instance().evaluate_quadratic_expression(
            lhs_terms,
            lhs_flags,
            rhs_terms,
            rhs_flags,
            linear_terms,
            linear_flags
        ) (56 gates, 0.01%)</title><rect x="99.9891%" y="157" width="0.0098%" height="23" fill="rgb(255,248,248)" fg:x="569314" fg:w="56"/><text x="100.2391%" y="171.50"></text></g><g><title>runtime_bignum.nr:537:16::product_limbs.get(N + N - 2) == 0 (1 gates, 0.00%)</title><rect x="99.9988%" y="133" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="569369" fg:w="1"/><text x="100.2488%" y="147.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="99.9988%" y="109" width="0.0002%" height="23" fill="rgb(255,249,249)" fg:x="569369" fg:w="1"/><text x="100.2488%" y="123.50"></text></g><g><title>all (569,376 gates, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="23" fill="rgb(255,100,100)" fg:x="0" fg:w="569376"/><text x="0.2500%" y="243.50"></text></g><g><title>unknown (6 gates, 0.00%)</title><rect x="99.9989%" y="205" width="0.0011%" height="23" fill="rgb(255,249,249)" fg:x="569370" fg:w="6"/><text x="100.2489%" y="219.50"></text></g><g><title>acir::arithmetic (6 gates, 0.00%)</title><rect x="99.9989%" y="181" width="0.0011%" height="23" fill="rgb(255,249,249)" fg:x="569370" fg:w="6"/><text x="100.2489%" y="195.50"></text></g></svg></svg>